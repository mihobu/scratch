ggplot(df.hd, aes(fill=N)) +
geom_rect(aes(xmin=nl, xmax=hd, ymin=lo, ymax=hi), fill=getPalette(length(nl))) +
geom_text(aes(x=nl-3, y=lo+0.5, label=round(nl,0)), hjust=1, size=12) +
geom_text(aes(x=hd+3, y=lo+0.5, label=round(hd,0)), hjust=0, size=12, fontface='bold') +
geom_text(aes(x=-10, y=lo+0.5, label=N), hjust=0.5, size=8, fontface='italic') +
ggtitle(paste('NEAR LIMIT / HYPERFOCAL DISTANCE FOR', f, 'mm', 'lens', sep=' ')) +
guides(fill=FALSE) +
scale_x_continuous(name='SUBJECT DISTANCE (FEET)') +
scale_y_continuous(name='F-NUMBER') +
theme(
axis.ticks=element_blank(),
panel.background=element_rect(fill='#D0D0D0', colour=NA),
plot.margin = unit(c(0.125,0.125,0.125,0.125), "in")
)
ggplot(df.hd, aes(fill=N)) +
geom_rect(aes(xmin=nl, xmax=hd, ymin=lo, ymax=hi), fill=getPalette(length(nl))) +
geom_text(aes(x=nl-3, y=lo+0.5, label=round(nl,0)), hjust=1, size=12) +
geom_text(aes(x=hd+3, y=lo+0.5, label=round(hd,0)), hjust=0, size=12, fontface='bold') +
geom_text(aes(x=-10, y=lo+0.5, label=N), hjust=0.5, size=8, fontface='italic') +
ggtitle(paste('NEAR LIMIT / HYPERFOCAL DISTANCE FOR', f, 'mm', 'lens', sep=' ')) +
guides(fill=FALSE) +
scale_x_continuous(name='SUBJECT DISTANCE (FEET)') +
scale_y_continuous(name='F-NUMBER') +
theme(
axis.ticks=element_blank(),
panel.background=element_rect(fill='#D0D0D0', colour=NA),
plot.margin = unit(c(0.125,0.250,0.125,0.125), "in")
)
ggplot(df.hd, aes(fill=N)) +
geom_rect(aes(xmin=nl, xmax=hd, ymin=lo, ymax=hi), fill=getPalette(length(nl))) +
geom_text(aes(x=nl-3, y=lo+0.5, label=round(nl,0)), hjust=1, size=8) +
geom_text(aes(x=hd+3, y=lo+0.5, label=round(hd,0)), hjust=0, size=8, fontface='bold') +
geom_text(aes(x=-10, y=lo+0.5, label=N), hjust=0.5, size=8, fontface='italic') +
ggtitle(paste('NEAR LIMIT / HYPERFOCAL DISTANCE FOR', f, 'mm', 'lens', sep=' ')) +
guides(fill=FALSE) +
scale_x_continuous(name='SUBJECT DISTANCE (FEET)') +
scale_y_continuous(name='F-NUMBER') +
theme(
axis.ticks=element_blank(),
panel.background=element_rect(fill='#D0D0D0', colour=NA),
plot.margin = unit(c(0.125,0.250,0.125,0.125), "in")
)
f <- 24
myfstops <- c(2.8, 3.3, 4, 4.8, 5.6, 6.7, 8, 9.5, 11, 13, 16, 22)
df.hd <- data.frame(cbind(myfstops))
colnames(df.hd) <- c('N')
hd <- sapply(myfstops, hd.wrapper)
df.hd <- data.frame(cbind(df.hd, hd))
nl <- apply(df.hd, 1, nl.wrapper)
df.hd <- data.frame(cbind(df.hd, nl))
df2.melt <- melt(df.hd, id.vars=c('hd', 'nl'))
# Add lo and hi columns (for plotting our rectangles)
df.hd <- data.frame(cbind(df.hd, seq(1,length(nl))))
df.hd <- data.frame(cbind(df.hd, seq(2,1+length(nl))))
colnames(df.hd) <- c('N', 'hd', 'nl', 'lo', 'hi')
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
ggplot(df.hd, aes(fill=N)) +
geom_rect(aes(xmin=nl, xmax=hd, ymin=lo, ymax=hi), fill=getPalette(length(nl))) +
geom_text(aes(x=nl-3, y=lo+0.5, label=round(nl,0)), hjust=1, size=8) +
geom_text(aes(x=hd+3, y=lo+0.5, label=round(hd,0)), hjust=0, size=8, fontface='bold') +
geom_text(aes(x=-10, y=lo+0.5, label=N), hjust=0.5, size=8, fontface='italic') +
ggtitle(paste('NEAR LIMIT / HYPERFOCAL DISTANCE FOR', f, 'mm', 'lens', sep=' ')) +
guides(fill=FALSE) +
scale_x_continuous(name='SUBJECT DISTANCE (FEET)') +
scale_y_continuous(name='F-NUMBER') +
theme(
axis.ticks=element_blank(),
panel.background=element_rect(fill='#D0D0D0', colour=NA),
plot.margin = unit(c(0.125,0.250,0.125,0.125), "in")
)
?runif
v <- runif(1000,1,5)
v
v <- sample(1:5, 1000, replace=TRUE)
v
table(v)
v <- sample(1:5, 1000, replace=TRUE)
x <- runif(1000, 1, 100)
y <- runif(1000, 1, 100)
df <- data.frame(cbind(v, x, y))
head(df)
ggplot(df, aes(x, y, fill=v)) + geom_point()
require(ggplot2)
require(reshape2)
require(RColorBrewer)
ggplot(df, aes(x, y, fill=v)) + geom_point()
ggplot(df, aes(x, y, color=v)) + geom_point()
ggplot(df, aes(x, y, color=v)) + geom_point() +
scale_fill_brewer(palette="Spectral")
ggplot(df, aes(x, y, color=v)) + geom_point() +
scale_color_brewer(palette="Spectral")
v <- factor(sample(1:5, 1000, replace=TRUE))
v
x <- runif(1000, 1, 100)
y <- runif(1000, 1, 100)
df <- data.frame(cbind(v, x, y))
head(df)
ggplot(df, aes(x, y, color=v)) + geom_point() +
scale_color_brewer(palette="Spectral")
ggplot(df, aes(x, y, color=v)) + geom_point()
ggplot(df, aes(x, y)) + geom_point(aes(color=v))
head(mpg)
unique(mpg$manufacturer)
ggplot(mpg, aes(displ, cty, colour=class)) + geom_point()
ggplot(mpg, aes(displ, cty, colour=class)) +
geom_point() +
scale_color_discrete("Spectral")
ggplot(mpg, aes(displ, cty, colour=class)) +
geom_point() +
scale_color_discrete("Set1")
# Same plot with custom palette
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_discrete("Set1")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_discrete("Dark2")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_discrete("RdYlGn")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_fill_discrete("RdYlGn")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_brewer("RdYlGn")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_brewer("Spectral")
ggplot(mpg, aes(displ, cty, color=class)) +
geom_point() +
scale_color_brewer(palette="Spectral")
head(mpg)
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point()
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point() +
scale_color_brewer(palette="Spectral")
?colorRampPalette
myPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
myPalette
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
rm(myPalette())
rm(myPalette
)
ggplot(mpg, aes(displ, cty, color=fill=getPalette(length(mpg$manufacturer)))) +
geom_point()
ggplot(mpg, aes(displ, cty, color=getPalette(length(mpg$manufacturer)))) +
geom_point()
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point(color=getPalette(length(mpg$manufacturer)))
numColors <- length$manufacturer
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point(color=getPalette(numColors))
numColors <- length$manufacturer
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point(color=getPalette(numColors))
numColors
numColors <- length$manufacturer
numColors <- len(unique(mpg$manufacturer))
numColors <- length(unique(mpg$manufacturer))
numColors
ggplot(mpg, aes(displ, cty, color=manufacturer)) +
geom_point(color=getPalette(numColors))
getPalette <- colorRampPalette(brewer.pal("Spectral"))
table(mpg$manufacturer)
sort(table(mpg$manufacturer))
t
df.mfg <- data.frame(sort(table(mpg$manufacturer)))
df.mfg
ggplot(df.mfg, aes(Freq)) + geom_bar()
ggplot(df.mfg, aes(Freq)) + geom_bar(stat='identity')
ggplot(df.mfg, aes(Freq)) + geom_hist()
ggplot(df.mfg, aes(Freq)) + geom_bar()
ggplot(df.mfg, aes(x=Freq)) + geom_bar()
ggplot(df.mfg, aes(y=Freq)) + geom_bar()
ggplot(df.mfg, aes(x=Var1,y=Freq)) + geom_bar()
ggplot(df.mfg, aes(x=Var1,y=Freq)) + geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1,Freq)) + geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1,Freq)) +
geom_bar(stat="identity") +
scale_color_brewer(palette="Spectral")
ggplot(df.mfg, aes(Var1,Freq)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
ggplot(df.mfg, aes(Var1, Freq, color=Var1)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity", color=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity", fill=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq, fill=getPalette(numColors))) +
geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1, Freq) +
geom_bar(stat="identity", fill=getPalette(numColors)))
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors)) +
guide_legend()
ggplot(df.mfg, aes(Var1, Freq, fill=getPalette(numColors))) +
geom_bar(stat="identity") +
scale_fill_manual(fill=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq, fill=getPalette(numColors))) +
geom_bar(stat="identity") +
scale_fill_manual(fill=manufacturer)
ggplot(df.mfg, aes(Var1, Freq, fill=getPalette(numColors))) +
geom_bar(stat="identity")
df.mfg
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity", fill=getPalette(numColors))
getPalette(21)
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors)) +
scale_fill_manual(values=getPalette(numColors))
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors)) +
scale_fill_manual(values=getPalette(numColors), name='moo')
ggplot(df.mfg, aes(Var1, Freq)) +
geom_bar(stat="identity", fill=getPalette(numColors)) +
scale_fill_manual(values=getPalette(numColors), name=unique(mpg$manufacturer))
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
numColors <- length(unique(mpg$manufacturer))
myPalette <- getPalette(numColors)
myPalette
ggplot(df.mfg, aes(Var1, Freq, fill=Var1) +
geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity")
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral")
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
numColors <- length(unique(mpg$manufacturer))
myPalette <- getPalette(numColors)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Spectral") # GIVES ERROR!
numColors
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
numColors <- length(unique(mpg$manufacturer))
myPalette <- getPalette(numColors)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer))
getPalette <- colorRampPalette(brewer.pal(11, "Dark2"))
numColors <- length(unique(mpg$manufacturer))
myPalette <- getPalette(numColors)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer))
getPalette <- colorRampPalette(brewer.pal(11, "Spectral"))
numColors <- length(unique(mpg$manufacturer))
myPalette <- getPalette(numColors)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer), title='')
?scale_fill_manual
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name=unique(mpg$manufacturer), scale_name='')
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='mfg', labels=unique(mpg$manufacturer), ='')
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='mfg', labels=unique(mpg$manufacturer))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
theme(
axis.text.x = element_blank()
)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
theme(
axis.text.x = element_blank(),
axis.ticks  = element_blank()
)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer))
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
scale_y_continuous(name='', major_breaks=seq(0,50,5), minor_breaks=FALSE) +
theme(
axis.text.x = element_blank(),
axis.ticks  = element_blank()
)
?scale_y_continuous
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
scale_y_continuous(name='', breaks=seq(0,50,5), minor_breaks=FALSE) +
theme(
axis.text.x = element_blank(),
axis.ticks  = element_blank()
)
?scale_x_discrete
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
scale_y_continuous(name='', breaks=seq(0,50,5), minor_breaks=FALSE) +
scale_x_discrete(name='', breaks=FALSE, minor_breaks=FALSE) +
theme(
axis.text.x = element_blank(),
axis.ticks  = element_blank()
)
ggplot(df.mfg, aes(Var1, Freq, fill=Var1)) +
geom_bar(stat="identity") +
scale_fill_manual(values=myPalette, name='Manufacturer', labels=unique(mpg$manufacturer)) +
scale_y_continuous(name='', breaks=seq(0,50,5), minor_breaks=FALSE) +
scale_x_discrete(name='', breaks=FALSE) +
theme(
axis.text.x = element_blank(),
axis.ticks  = element_blank()
)
dpi <- 300
x.min <- 10
x.max <- 100
fn <- function(x) { x^2 }
steps <- 300
x.min <- 10
x.max <- 100
X <- seq(s.min, s.max, length.out=steps)
X <- seq(x.min, x.max, length.out=steps)
Y <- sapply(X, fn)
Y
df <- data.frame(X, Y)
require(ggplot2)
ggplot(aes(X, Y)) + geom_line()
ggplot(df, aes(X, Y)) + geom_line()
PI
pi
2pi
pi2
2*pi
steps <- 300
x.min <- -2*pi
x.max <- +2*pi
steps <- 1000
x.min <- -2*pi
x.max <- +2*pi
fn <- function(x) { sin(x) }
X <- seq(x.min, x.max, length.out=steps)
Y <- sapply(X, fn)
df <- data.frame(X, Y)
ggplot(df, aes(X, Y)) + geom_line()
steps <- 10
x.min <- -2*pi
x.max <- +2*pi
fn <- function(x) { sin(x) }
X <- seq(x.min, x.max, length.out=steps)
Y <- sapply(X, fn)
df <- data.frame(X, Y)
ggplot(df, aes(X, Y)) + geom_line()
ggplot() + stat_function(fun=fn) + xlim(x.min, x.max)
data.frame(x=0)
df <- data.frame(x=0)
ggplot(df) + stat_function(fun=fn) + xlim(x.min, x.max)
ggplot(df) + stat_function(fun=fn) + xlim(-pi, pi)
foo <- structure(list(), class="foo")
foo
class(foo)
foo <- function() {
structure(list(), class="foo")
}
myFoo <- foo()
myFoo
class(myFoo)
foo <- function() {
# Create and assign class in one step
structure(list(), class="foo")
y <- 1
}
myFoo <- foo()
myFoo
myFoo$y
foo <- function() {
# Create and assign class in one step
x <- structure(list(), class="foo")
x$y <- 1
x
}
myFoo <- foo()
class(myFoo)
myFoo
myFoo$y
foo <- function() {
# Create and assign class in one step
x <- structure(list(), class="foo")
x$y <- 1
return(x)
}
foo.fn <- function(x) { sin(x) }
foo.fn <- function() { sin(y) }
foo <- function() {
# Create and assign class in one step
x <- structure(list(), class="foo")
x$y <- 1
x$fn <- foo.fn
return(x)
}
myFoo <- foo()
myFoo.fn()
myFoo$fn()
myFoo::fn()
fn <- function(x) { sin(x) }
df <- data.frame(x=0) # We need a "dummy" data frame
ggplot(df) + stat_function(fun=fn) + xlim(-pi, pi)
df <- data.frame(x=0) # We need a "dummy" data frame
ggplot(df) + stat_function(fun=sin) + xlim(-pi, pi)
ggplot() + stat_function(fun=sin) + xlim(-pi, pi)
df <- data.frame(x=0) # We need a "dummy" data frame
ggplot() + stat_function(fun=sin) + xlim(-pi, pi)
ggplot(NULL) + stat_function(fun=sin) + xlim(-pi, pi)
ggplot(df) + stat_function(fun=sin) + xlim(-pi, pi)
fn <- function(x) { x^3 - 2*x^2 + 14*x - 17 }
ggplot(df) + stat_function(fun=fn) + xlim(-pi, pi)
ggplot(df) + stat_function(fun=fn) + xlim(-100, 100)
ggplot(df) + stat_function(fun=fn) + xlim(-1000, 1000)
fn <- function(x) { x^3 + x^2 + x }
ggplot(df) + stat_function(fun=fn) + xlim(-1000, 1000)
fn <- function(x) { x^3 - x^2 + x }
ggplot(df) + stat_function(fun=fn) + xlim(-1000, 1000)
fn <- function(x) { x^3 - x^2 + x }
ggplot(df) + stat_function(fun=fn) + xlim(-10, 10)
fn <- function(x) { x^3 - 2*x^2 + x }
ggplot(df) + stat_function(fun=fn) + xlim(-10, 10)
fn <- function(x) { x^3 - 2*x^2 }
ggplot(df) + stat_function(fun=fn) + xlim(-10, 10)
fn <- function(x) { x^3 + 2*x^2 }
ggplot(df) + stat_function(fun=fn) + xlim(-10, 10)
fn <- function(x) { x^3 + x^2 - 8*x - 8 }
ggplot(df) + stat_function(fun=fn) + xlim(-10, 10)
fn <- function(x) { x^3 + x^2 - 8*x - 8 }
ggplot(df) + stat_function(fun=fn) + xlim(-20, 20) + ylim(-20, 20)
ggplot(df) + stat_function(fun=fn) + xlim(-5, 5) + ylim(-20, 20)
ggplot(df) + stat_function(fun=sin)
ggplot(df) + stat_function(fun=sin) + xlim(-pi, pi)
ggplot(df) + stat_function(fun=sin)
ggplot(df) + stat_function(fun=sin) +
xlim(-pi, pi)
ggplot(df) + stat_function(fun=fn) + xlim(-5, 5)
ggplot(df) + stat_function(fun=sin) +
xlim(-pi, pi) # You need to provide x limits or you'll get an error
fn <- function(x) { x^3 + x^2 - 8*x - 8 }
ggplot(df) + stat_function(fun=fn) + xlim(-5, 5) + ylim(-20, 20)
fn <- function(x) { x^3 + x^2 - 8*x - 8 }
ggplot(df) + stat_function(fun=fn) + xlim(-5, 5)
deriv(fn(3))
?deriv
D(fn, 'x')
D('x^3', 'x')
D(x^3, 'x')
D(x^3, x)
D(~ x^3, 'x')
deriv(~ x^3, 'x')
deriv(~ fn, 'x')
ggplot(df) + stat_function(fun=fn) + +stat_function(fun=deriv(~ fn, 'x')) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + +stat_function(fun=deriv(~ fn, x)) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + +stat_function(fun=deriv(fn) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + +stat_function(fun=deriv(fn)) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + +stat_function(fun=deriv(fn)) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + stat_function(fun=deriv(fn), 'x') + xlim(-5, 5)
dx2x <- deriv(~ x^2, "x")
dx2x
mode(dx2x)
dx2x
x<- -5:5
eval(dx2x)
dxfx <- deriv(~fn, 'x')
dx2x <- deriv(~ x^2, "x")
ggplot(df) + stat_function(fun=fn) + stat_function(fun=dxfx) + xlim(-5, 5)
dxfx <- deriv(~fn, 'x')
ggplot(df) + stat_function(fun=fn) + stat_function(fun=dxfx) + xlim(-5, 5)
ggplot(df) + stat_function(fun=fn) + stat_function(fun=eval(dxfx)) + xlim(-5, 5)
dxfx(2)
dxfx <- deriv(~fn, 'x')
dxfx(2)
dxfx
x<-0; eval(dxfx)
x<-0; y<- eval(dxfx)
y
fn <- function(x) { x^3 + x^2 - 8*x - 8 }
ggplot(df) + stat_function(fun=fn) + xlim(-5, 5)
setwd("O:/dev/scratch/photo")
